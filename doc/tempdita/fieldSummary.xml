<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="robotlegs.bender.bundles"><apiName>robotlegs.bender.bundles</apiName><apiClassifier id="robotlegs.bender.bundles:SARSBundle"><apiName>SARSBundle</apiName><shortdesc>
	 The SARSBundle class will include all extensions which are required
	 to create functioning SARS/MVCS application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.framework.api:IBundle</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The <codeph>SARSBundle</codeph> class will include all extensions which are required
	 to create functioning SARS/MVCS application.
	 
	 <p><i>Note: Extensions loaded by this bundle are in precise order since some
	 extensions require injections which are mapped in other extensions.</i></p>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsContextView.api"><apiName>robotlegs.bender.extensions.sarsContextView.api</apiName><apiClassifier id="robotlegs.bender.extensions.sarsContextView.api:ISARSContextView"><apiName>ISARSContextView</apiName><shortdesc>
	 The ISARSContextView interface defines contract between 
	 core SARS application and another external application.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The <codeph>ISARSContextView</codeph> interface defines contract between 
	 core SARS application and another external application.
	 
	 <p>This interface is created so that SARS context view can be rendered
	 on demand. This is usefull when creating multiple components which are
	 also based on SARS. You should also pass stage3DProxy instance and register
	 it in its context so that they can draw on the same canvas.</p>
	 
	 <p>For example lets take that you are loading gallery which is using SARS 
	 extension and defines 3 layers:
	 <ul>
	 <li>Starling layer showing gallery background</li>
	 <li>Away3D layer with images as planes with bitmap textures</li>
	 <li>Starling layer having artsy fartsy particle effects for browsing through collection</li>
	 </ul></p>
	 
	 <p>Now you need to use this gallery in your fancy pants application based using
	 SARS extension as well. So you need to render your gallery at on point because its
	 layers need to keep the same structure and order and not mix with your application.</p>
	 
	 <p>Lets define your sample app layers:
	 <ul>
	 <li>Starling layer presenting app background</li>
	 <li>Away3D layer with some funny looking ambient 3D stuff</li>
	 <li>Layer for your SARS gallery</li>
	 <li>Starling layer containing 2D navigation for your app</li>
	 </ul></p>
	 
	 <p>So your app would define following rendering order:
	 <codeblock rev="3.0">
	 stage3DProxy.clear();
	 
	 myAppBackground.nextFrame();
	 someAmbient3DStuffView3D.render();
	 gallery.render();
	 appNavigation.nextFrame();
	 
	 stage3DProxy.present();
	 </codeblock></p>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsContextView"><apiName>robotlegs.bender.extensions.sarsContextView</apiName><apiClassifier id="robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension"><apiName>SARSContextViewExtension</apiName><shortdesc>
	 This Extension will map default context view to injector.
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p>This Extension will map default context view to injector.</p>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsIntegration.api"><apiName>robotlegs.bender.extensions.sarsIntegration.api</apiName><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap"><apiName>IStarlingViewMap</apiName><shortdesc>
	 The IStarlingViewMap interface defines methods which will enable
	 view instance to be added or removed from mediation.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The <codeph>IStarlingViewMap</codeph> interface defines methods which will enable
	 view instance to be added or removed from mediation.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap"><apiName>IAway3DViewMap</apiName><shortdesc>
	 The IAway3DViewMap interface defines methods which will enable
	 view instance to be added or removed from mediation.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The <codeph>IAway3DViewMap</codeph> interface defines methods which will enable
	 view instance to be added or removed from mediation.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject"><apiName>IDisplayObject</apiName><shortdesc>
	 The IDisplayObject interface defines methods which will be 
	 invoked when object is added to/removed from display list.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The <codeph>IDisplayObject</codeph> interface defines methods which will be 
	 invoked when object is added to/removed from display list.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection"><apiName>StarlingCollection</apiName><shortdesc>
	 The StarlingCollection class represents collection of Starling
	 instances which will be used in SARS extension.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The <codeph>StarlingCollection</codeph> class represents collection of Starling
	 instances which will be used in SARS extension.
	 
	 <p>This class will adds support to have multiple instances of Starling available
	 in Robotlegs application. All Starling instances when added to collection must
	 have defined name which will actually be used as named injection of Starling
	 view.</p>
	 </apiDesc></apiClassifierDetail><apiValue id="robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection:items:get"><apiName>items</apiName><shortdesc>
		 Get Starling instances in collection.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 Get Starling instances in collection.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection:length:get"><apiName>length</apiName><shortdesc>
		 Number of items in collection.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 Number of items in collection.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsIntegration.impl"><apiName>robotlegs.bender.extensions.sarsIntegration.impl</apiName><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap"><apiName>StarlingViewMap</apiName><shortdesc>
	 The StarlingViewMap class performs managing Starling stage and 
	 views automatic mediation.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The <codeph>StarlingViewMap</codeph> class performs managing Starling stage and 
	 views automatic mediation. When view is added or removed from stage, it will
	 automatically create or destroy its mediator.
	 </apiDesc></apiClassifierDetail><apiValue id="robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap:mediatorMap"><apiName>mediatorMap</apiName><shortdesc> Map for mediating views.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"/></apiValueDef><apiDesc> Map for mediating views. </apiDesc></apiValueDetail></apiValue><apiValue id="robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap:starlingCollection"><apiName>starlingCollection</apiName><shortdesc> Collection of Starling views which will receive display objects.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection</apiValueClassifier></apiValueDef><apiDesc> Collection of Starling views which will receive display objects. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap"><apiName>Away3DViewMap</apiName><shortdesc>
	 The Away3DViewMap class performs managing Away3D scene and 
	 views automatic mediation.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The <codeph>Away3DViewMap</codeph> class performs managing Away3D scene and 
	 views automatic mediation. When view is added or removed from scene, it will
	 automatically create or destroy its mediator.
	 </apiDesc></apiClassifierDetail><apiValue id="robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap:mediatorMap"><apiName>mediatorMap</apiName><shortdesc> Map for mediating views.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"/></apiValueDef><apiDesc> Map for mediating views. </apiDesc></apiValueDetail></apiValue><apiValue id="robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap:view3D"><apiName>view3D</apiName><shortdesc> Instance of View3D which contains scene receiving display objects.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="away3d.containers:View3D"/></apiValueDef><apiDesc> Instance of View3D which contains scene receiving display objects. </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsIntegration"><apiName>robotlegs.bender.extensions.sarsIntegration</apiName><apiClassifier id="robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension"><apiName>SARSIntegrationExtension</apiName><shortdesc>
	 This Extension will map all Starling view instances and View3D instance in
	 injector as well as create view maps for automatic mediation when instances are
	 added on stage/scene.
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p>This Extension will map all Starling view instances and View3D instance in
	 injector as well as create view maps for automatic mediation when instances are
	 added on stage/scene.</p>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="robotlegs.bender.extensions.sarsStageSync"><apiName>robotlegs.bender.extensions.sarsStageSync</apiName><apiClassifier id="robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension"><apiName>SARSStageSyncExtension</apiName><shortdesc>
	 This Extension waits for a DisplayObjectContainer to be added as a configuration,
	 and all Starling view instances defined to be initialized.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <p>This Extension waits for a DisplayObjectContainer to be added as a configuration,
	 and all Starling view instances defined to be initialized. When all of them are ready,
	 context is initialized. On the other hand losing reference to stage will destroy 
	 context.</p>
	 	 <p>It should be installed before context initialization.</p>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage></allClasses>