<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="robotlegs.bender.bundles">
      <apiName>robotlegs.bender.bundles</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.bundles:SARSBundle">
         <apiName>SARSBundle</apiName>
         <shortdesc>
	 The SARSBundle class will include all extensions which are required
	 to create functioning SARS/MVCS application.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords" content="SARSBundle,robotlegs.bender.bundles.SARSBundle,extend"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.framework.api:IBundle</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>SARSBundle</codeph> class will include all extensions which are required
	 to create functioning SARS/MVCS application.
	 
	 <p>
                  <i>Note: Extensions loaded by this bundle are in precise order since some
	 extensions require injections which are mapped in other extensions.</i>
               </p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.framework.api:IBundle"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsContextView.api">
      <apiName>robotlegs.bender.extensions.sarsContextView.api</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsContextView.api:ISARSContextView">
         <apiName>ISARSContextView</apiName>
         <shortdesc>
	 The ISARSContextView interface defines contract between 
	 core SARS application and another external application.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ISARSContextView,robotlegs.bender.extensions.sarsContextView.api.ISARSContextView,render"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>ISARSContextView</codeph> interface defines contract between 
	 core SARS application and another external application.
	 
	 <p>This interface is created so that SARS context view can be rendered
	 on demand. This is usefull when creating multiple components which are
	 also based on SARS. You should also pass stage3DProxy instance and register
	 it in its context so that they can draw on the same canvas.</p>
	 
	              <p>For example lets take that you are loading gallery which is using SARS 
	 extension and defines 3 layers:
	 <ul>
	                    <li>Starling layer showing gallery background</li>
	                    <li>Away3D layer with images as planes with bitmap textures</li>
	                    <li>Starling layer having artsy fartsy particle effects for browsing through collection</li>
	                 </ul>
               </p>
	 
	              <p>Now you need to use this gallery in your fancy pants application based using
	 SARS extension as well. So you need to render your gallery at on point because its
	 layers need to keep the same structure and order and not mix with your application.</p>
	 
	              <p>Lets define your sample app layers:
	 <ul>
	                    <li>Starling layer presenting app background</li>
	                    <li>Away3D layer with some funny looking ambient 3D stuff</li>
	                    <li>Layer for your SARS gallery</li>
	                    <li>Starling layer containing 2D navigation for your app</li>
	                 </ul>
               </p>
	 
	              <p>So your app would define following rendering order:
	 <codeblock rev="3.0">
	 stage3DProxy.clear();
	 
	 myAppBackground.nextFrame();
	 someAmbient3DStuffView3D.render();
	 gallery.render();
	 appNavigation.nextFrame();
	 
	 stage3DProxy.present();
	 </codeblock>
               </p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsContextView">
      <apiName>robotlegs.bender.extensions.sarsContextView</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension">
         <apiName>SARSContextViewExtension</apiName>
         <shortdesc>
	 This Extension will map default context view to injector.
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="SARSContextViewExtension,robotlegs.bender.extensions.sarsContextView.SARSContextViewExtension,extend,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>This Extension will map default context view to injector.</p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.framework.api:IExtension"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsIntegration.api">
      <apiName>robotlegs.bender.extensions.sarsIntegration.api</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap">
         <apiName>IStarlingViewMap</apiName>
         <shortdesc>
	 The IStarlingViewMap interface defines methods which will enable
	 view instance to be added or removed from mediation.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IStarlingViewMap,robotlegs.bender.extensions.sarsIntegration.api.IStarlingViewMap,addAway3DView,addItem,addStarlingView,destroy,getItem,init,removeAway3DView,removeItem,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>IStarlingViewMap</codeph> interface defines methods which will enable
	 view instance to be added or removed from mediation.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap">
         <apiName>IAway3DViewMap</apiName>
         <shortdesc>
	 The IAway3DViewMap interface defines methods which will enable
	 view instance to be added or removed from mediation.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IAway3DViewMap,robotlegs.bender.extensions.sarsIntegration.api.IAway3DViewMap,addAway3DView,addItem,addStarlingView,destroy,getItem,init,removeAway3DView,removeItem,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>IAway3DViewMap</codeph> interface defines methods which will enable
	 view instance to be added or removed from mediation.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject">
         <apiName>IDisplayObject</apiName>
         <shortdesc>
	 The IDisplayObject interface defines methods which will be 
	 invoked when object is added to/removed from display list.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IDisplayObject,robotlegs.bender.extensions.sarsIntegration.api.IDisplayObject,addAway3DView,addItem,addStarlingView,destroy,getItem,init,removeAway3DView,removeItem,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>IDisplayObject</codeph> interface defines methods which will be 
	 invoked when object is added to/removed from display list.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection">
         <apiName>StarlingCollection</apiName>
         <shortdesc>
	 The StarlingCollection class represents collection of Starling
	 instances which will be used in SARS extension.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="StarlingCollection,robotlegs.bender.extensions.sarsIntegration.api.StarlingCollection,items,length,addAway3DView,addItem,addStarlingView,destroy,getItem,init,removeAway3DView,removeItem,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>StarlingCollection</codeph> class represents collection of Starling
	 instances which will be used in SARS extension.
	 
	 <p>This class will adds support to have multiple instances of Starling available
	 in Robotlegs application. All Starling instances when added to collection must
	 have defined name which will actually be used as named injection of Starling
	 view.</p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsIntegration.impl">
      <apiName>robotlegs.bender.extensions.sarsIntegration.impl</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap">
         <apiName>StarlingViewMap</apiName>
         <shortdesc>
	 The StarlingViewMap class performs managing Starling stage and 
	 views automatic mediation.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="StarlingViewMap,robotlegs.bender.extensions.sarsIntegration.impl.StarlingViewMap,mediatorMap,mediatorMap,starlingCollection,view3D,addAway3DView,addStarlingView,init,init,removeAway3DView,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>StarlingViewMap</codeph> class performs managing Starling stage and 
	 views automatic mediation. When view is added or removed from stage, it will
	 automatically create or destroy its mediator.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap">
         <apiName>Away3DViewMap</apiName>
         <shortdesc>
	 The Away3DViewMap class performs managing Away3D scene and 
	 views automatic mediation.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Away3DViewMap,robotlegs.bender.extensions.sarsIntegration.impl.Away3DViewMap,mediatorMap,mediatorMap,starlingCollection,view3D,addAway3DView,addStarlingView,init,init,removeAway3DView,removeStarlingView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The <codeph>Away3DViewMap</codeph> class performs managing Away3D scene and 
	 views automatic mediation. When view is added or removed from scene, it will
	 automatically create or destroy its mediator.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsIntegration">
      <apiName>robotlegs.bender.extensions.sarsIntegration</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension">
         <apiName>SARSIntegrationExtension</apiName>
         <shortdesc>
	 This Extension will map all Starling view instances and View3D instance in
	 injector as well as create view maps for automatic mediation when instances are
	 added on stage/scene.
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="SARSIntegrationExtension,robotlegs.bender.extensions.sarsIntegration.SARSIntegrationExtension,extend,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>This Extension will map all Starling view instances and View3D instance in
	 injector as well as create view maps for automatic mediation when instances are
	 added on stage/scene.</p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.framework.api:IExtension"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="robotlegs.bender.extensions.sarsStageSync">
      <apiName>robotlegs.bender.extensions.sarsStageSync</apiName>
      <apiDetail/>
      <apiClassifier id="robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension">
         <apiName>SARSStageSyncExtension</apiName>
         <shortdesc>
	 This Extension waits for a DisplayObjectContainer to be added as a configuration,
	 and all Starling view instances defined to be initialized.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="SARSStageSyncExtension,robotlegs.bender.extensions.sarsStageSync.SARSStageSyncExtension,extend,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>robotlegs.bender.framework.api:IExtension</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	              <p>This Extension waits for a DisplayObjectContainer to be added as a configuration,
	 and all Starling view instances defined to be initialized. When all of them are ready,
	 context is initialized. On the other hand losing reference to stage will destroy 
	 context.</p>
	 	            <p>It should be installed before context initialization.</p>
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="robotlegs.bender.framework.api:IExtension"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
</allClasses>