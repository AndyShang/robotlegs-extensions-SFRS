<asdoc>

<interfaceRec name='IAway3DViewMap' fullname='robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/api/IAway3DViewMap.as' namespace='robotlegs.bender.extensions.sarsIntegration.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>IAway3DViewMap</code> interface defines methods which will enable
	 view instance to be added or removed from mediation.
	 ]]></description>
</interfaceRec>
<method name='addAway3DView' fullname='robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap/robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap:addAway3DView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Add view to mediator map.
		 
		 ]]></description>
<param><![CDATA[view View instance that needs to be mediated.
		 ]]></param>
</method>
<method name='removeAway3DView' fullname='robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap/robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap:removeAway3DView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Remove view from mediator map.
		 
		 ]]></description>
<param><![CDATA[view View instance that needs to remove mediation.
		 ]]></param>
</method>
<interfaceRec name='IDisplayObject' fullname='robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/api/IDisplayObject.as' namespace='robotlegs.bender.extensions.sarsIntegration.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>IDisplayObject</code> interface defines methods which will be 

	 invoked when object is added to/removed from display list.

	 ]]></description>
</interfaceRec>
<method name='destroy' fullname='robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject/robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject:destroy' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Object has been removed from display list so perform disposing.

		 ]]></description>
</method>
<method name='init' fullname='robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject/robotlegs.bender.extensions.sarsIntegration.api:IDisplayObject:init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Object is added on display list so it is safe to begin initialization.

		 ]]></description>
</method>
<interfaceRec name='IStarlingViewMap' fullname='robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/api/IStarlingViewMap.as' namespace='robotlegs.bender.extensions.sarsIntegration.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>IStarlingViewMap</code> interface defines methods which will enable

	 view instance to be added or removed from mediation.

	 ]]></description>
</interfaceRec>
<method name='addStarlingView' fullname='robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap/robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap:addStarlingView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='starling.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Add view to mediator map.

		 

		 ]]></description>
<param><![CDATA[view View instance that needs to be mediated.

		 ]]></param>
</method>
<method name='removeStarlingView' fullname='robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap/robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap:removeStarlingView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='starling.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Remove view from mediator map.

		 

		 ]]></description>
<param><![CDATA[view View instance that needs to remove mediation.

		 ]]></param>
</method>
<classRec name='StarlingCollection' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/api/StarlingCollection.as' namespace='robotlegs.bender.extensions.sarsIntegration.api' access='public' baseclass='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>StarlingCollection</code> class represents collection of Starling

	 instances which will be used in SARS extension.

	 

	 <p>This class will adds support to have multiple instances of Starling available

	 in Robotlegs application. All Starling instances when added to collection must

	 have defined name which will actually be used as named injection of Starling

	 view.</p>

	 ]]></description>
</classRec>
<method name='addItem' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/addItem' isStatic='false' isFinal='false' isOverride='false'  param_names='starling;name' param_types='starling.core:Starling;String' param_defaults='undefined;undefined' result_type='uint'>
<description><![CDATA[

		 Add Starling instance to collection.

		 

		 <p>Instance will be added to dictionary with key as name provided. When 

		 using this collection with SARS, Starling views will be mapped to injector

		 and differentiated by named injection. Name will be exact same as one

		 provieded when adding instance to this collection.</p>

		 

		 ]]></description>
<param><![CDATA[starling Starling instace to add to collection.

		 

		 ]]></param>
<param><![CDATA[name Name by which Starling instance will be remembered.

		 

		 ]]></param>
<return><![CDATA[Return number of instances in collection.

		 ]]></return>
</method>
<method name='getItem' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/getItem' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='starling.core:Starling'>
<description><![CDATA[

		 Get Starling instance by name.

		 

		 ]]></description>
<param><![CDATA[name Name provided when Starling instance was added to collection.

		 

		 ]]></param>
<return><![CDATA[Returns Starling instance it it was found, or <code>null</code> 

		 otherwise.

		 ]]></return>
</method>
<method name='removeItem' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/removeItem' isStatic='false' isFinal='false' isOverride='false'  param_names='name' param_types='String' param_defaults='undefined' result_type='starling.core:Starling'>
<description><![CDATA[

		 Remove Starling item from collection by its name.

		 

		 ]]></description>
<param><![CDATA[name Name by which Starling instance was added to collection.

		 

		 ]]></param>
<return><![CDATA[Returns Starling instance which was removed if it is found, or if 

		 not found by that name, returns <code>null</code>. 

		 ]]></return>
</method>
<method name='items' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/items/get' isStatic='false' isFinal='false' isOverride='false'  result_type='flash.utils:Dictionary'>
<description><![CDATA[

		 Get Starling instances in collection.

		 

		 ]]></description>
<return><![CDATA[Returns Starling instances collection. 

		 ]]></return>
</method>
<method name='length' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/length/get' isStatic='false' isFinal='false' isOverride='false'  result_type='uint'>
<description><![CDATA[

		 Number of items in collection.

		 ]]></description>
</method>
<field name='_length' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/private:_length' type='uint' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[

		 Total number of Starling instances in dictionary (since Dictionary doesn't

		 keep track of number of items in it, and looping through it is expensive).

		 ]]></description>
</field>
<field name='_starlingCollection' fullname='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection/private:_starlingCollection' type='flash.utils:Dictionary' isStatic='false' isConst='false' defaultValue='unknown' >
<description><![CDATA[ Collection of all registered Starling views. ]]></description>
</field>
<interfaceRec name='ISARSContextView' fullname='robotlegs.bender.extensions.sarsContextView.api:ISARSContextView' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsContextView/api/ISARSContextView.as' namespace='robotlegs.bender.extensions.sarsContextView.api' access='public' baseClasses='Object' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>ISARSContextView</code> interface defines contract between 

	 core SARS application and another external application.

	 

	 <p>This interface is created so that SARS context view can be rendered

	 on demand. This is usefull when creating multiple components which are

	 also based on SARS. You should also pass stage3DProxy instance and register

	 it in its context so that they can draw on the same canvas.</p>

	 

	 <p>For example lets take that you are loading gallery which is using SARS 

	 extension and defines 3 layers:

	 <ul>

	 <li>Starling layer showing gallery background</li>

	 <li>Away3D layer with images as planes with bitmap textures</li>

	 <li>Starling layer having artsy fartsy particle effects for browsing through collection</li>

	 </ul></p>

	 

	 <p>Now you need to use this gallery in your fancy pants application based using

	 SARS extension as well. So you need to render your gallery at on point because its

	 layers need to keep the same structure and order and not mix with your application.</p>

	 

	 <p>Lets define your sample app layers:

	 <ul>

	 <li>Starling layer presenting app background</li>

	 <li>Away3D layer with some funny looking ambient 3D stuff</li>

	 <li>Layer for your SARS gallery</li>

	 <li>Starling layer containing 2D navigation for your app</li>

	 </ul></p>

	 

	 <p>So your app would define following rendering order:

	 <listing version="3.0">

	 stage3DProxy.clear();

	 

	 myAppBackground.nextFrame();

	 someAmbient3DStuffView3D.render();

	 gallery.render();

	 appNavigation.nextFrame();

	 

	 stage3DProxy.present();

	 </listing></p>

	 ]]></description>
</interfaceRec>
<method name='render' fullname='robotlegs.bender.extensions.sarsContextView.api:ISARSContextView/robotlegs.bender.extensions.sarsContextView.api:ISARSContextView:render' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Render all Starling and Away3D instances.

		 

		 <p>On Starling instances, call <code>nextFrame</code> function and 

		 on View3D instance call <code>render</code> function.</p>

		 ]]></description>
</method>
<classRec name='StarlingViewMap' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/impl/StarlingViewMap.as' namespace='robotlegs.bender.extensions.sarsIntegration.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.sarsIntegration.api:IStarlingViewMap' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>StarlingViewMap</code> class performs managing Starling stage and 

	 views automatic mediation. When view is added or removed from stage, it will

	 automatically create or destroy its mediator.

	 ]]></description>
</classRec>
<method name='addStarlingView' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/addStarlingView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='starling.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 

		 Add view to mediator map.

		 

		 ]]></description>
<param><![CDATA[view View instance that needs to be mediated.

		 ]]></param>
</method>
<method name='init' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[

		 Initialize listeners on Starling views.

		 ]]></description>
</method>
<method name='onRootCreated' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/private:onRootCreated' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='starling.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Add Starling stage to mediation.

		 

		 ]]></description>
<param><![CDATA[event Starling had been initialized.

		 

		 ]]></param>
</method>
<method name='onStarlingAdded' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/private:onStarlingAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='starling.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Handle Starling view added on display list.

		 

		 ]]></description>
<param><![CDATA[event Starling view added on stage.

		 ]]></param>
</method>
<method name='onStarlingRemoved' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/private:onStarlingRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='starling.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[

		 Handle Starling view removed from display list.

		 

		 ]]></description>
<param><![CDATA[event Starling view removed from stage.

		 ]]></param>
</method>
<method name='removeStarlingView' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/removeStarlingView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='starling.display:DisplayObject' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 

		 Remove view from mediator map.

		 

		 ]]></description>
<param><![CDATA[view View instance that needs to remove mediation.

		 ]]></param>
</method>
<field name='mediatorMap' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/mediatorMap' type='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap' isStatic='false' isConst='false' >
<description><![CDATA[ Map for mediating views. ]]></description>
</field>
<field name='starlingCollection' fullname='robotlegs.bender.extensions.sarsIntegration.impl:StarlingViewMap/starlingCollection' type='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection' isStatic='false' isConst='false' >
<description><![CDATA[ Collection of Starling views which will receive display objects. ]]></description>
</field>
<classRec name='Away3DViewMap' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/impl/Away3DViewMap.as' namespace='robotlegs.bender.extensions.sarsIntegration.impl' access='public' baseclass='Object' interfaces='robotlegs.bender.extensions.sarsIntegration.api:IAway3DViewMap' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 The <code>Away3DViewMap</code> class performs managing Away3D scene and 
	 views automatic mediation. When view is added or removed from scene, it will
	 automatically create or destroy its mediator.
	 ]]></description>
</classRec>
<method name='addAway3DView' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/addAway3DView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		 Add view to mediator map.
		 
		 ]]></description>
<param><![CDATA[view View instance that needs to be mediated.
		 ]]></param>
</method>
<method name='init' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/init' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Initialize listeners on Away3D scene.
		 ]]></description>
</method>
<method name='onSceneAdded' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/private:onSceneAdded' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='away3d.events:Scene3DEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Handle view added to scene.
		 
		 ]]></description>
<param><![CDATA[event View added to scene.
		 ]]></param>
</method>
<method name='onSceneRemoved' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/private:onSceneRemoved' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='away3d.events:Scene3DEvent' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Handle view removed from scene.
		 
		 ]]></description>
<param><![CDATA[event View removed from scene.
		 ]]></param>
</method>
<method name='removeAway3DView' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/removeAway3DView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='*' param_defaults='undefined' result_type='void'>
<description><![CDATA[ 
		 Remove view from mediator map.
		 
		 ]]></description>
<param><![CDATA[view View instance that needs to remove mediation.
		 ]]></param>
</method>
<method name='validateView' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/private:validateView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='*' param_defaults='undefined' result_type='Boolean'>
<description><![CDATA[
		 Validate if view added on scene is of type either <code>Scene3D</code> or 
		 <code>ObjectContainer3D</code>, and this is required since <code>Scene3D</code> 
		 doesn't extend <code>ObjectContainer3D</code>.
		 
		 ]]></description>
<param><![CDATA[view View that needs to be validated.
		 
		 ]]></param>
<return><![CDATA[Returns <code>true</code> if view is of valid type, or <code>false</code>
		 otherwise.
		 ]]></return>
</method>
<field name='mediatorMap' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/mediatorMap' type='robotlegs.bender.extensions.mediatorMap.api:IMediatorMap' isStatic='false' isConst='false' >
<description><![CDATA[ Map for mediating views. ]]></description>
</field>
<field name='view3D' fullname='robotlegs.bender.extensions.sarsIntegration.impl:Away3DViewMap/view3D' type='away3d.containers:View3D' isStatic='false' isConst='false' >
<description><![CDATA[ Instance of View3D which contains scene receiving display objects. ]]></description>
</field>
<classRec name='SARSBundle' fullname='robotlegs.bender.bundles:SARSBundle' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/bundles/SARSBundle.as' namespace='robotlegs.bender.bundles' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IBundle' isFinal='false' isDynamic='false' >
<description><![CDATA[

	 The <code>SARSBundle</code> class will include all extensions which are required

	 to create functioning SARS/MVCS application.

	 

	 <p><i>Note: Extensions loaded by this bundle are in precise order since some

	 extensions require injections which are mapped in other extensions.</i></p>

	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.bundles:SARSBundle/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<classRec name='SARSContextViewExtension' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsContextView/SARSContextViewExtension.as' namespace='robotlegs.bender.extensions.sarsContextView' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p>This Extension will map default context view to injector.</p>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='handleContextView' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/private:handleContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Map default context view.
		 
		 <p>Since <code>View3D</code> is based on <code>DisplayObjectContainer</code> it
		 will also try to initialize as context view, but since it is handled differently
		 as part of SARS, it is set to be ignored.</p>
		 
		 ]]></description>
<param><![CDATA[view View being set as context view.
		 ]]></param>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the string representation of the specified object.
		 ]]></description>
</method>
<field name='_injector' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/private:_injector' type='org.swiftsuspenders:Injector' isStatic='false' isConst='false' >
<description><![CDATA[ Injector used in context. ]]></description>
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
<description><![CDATA[ Logger used to log messaged when using this extension. ]]></description>
</field>
<field name='_uid' fullname='robotlegs.bender.extensions.sarsContextView:SARSContextViewExtension/private:_uid' type='String' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Extension UID. ]]></description>
</field>
<classRec name='SARSStageSyncExtension' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsStageSync/SARSStageSyncExtension.as' namespace='robotlegs.bender.extensions.sarsStageSync' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p>This Extension waits for a DisplayObjectContainer to be added as a configuration,
	 and all Starling view instances defined to be initialized. When all of them are ready,
	 context is initialized. On the other hand losing reference to stage will destroy 
	 context.</p>
	 	 <p>It should be installed before context initialization.</p>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='handleContextView' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:handleContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='view' param_types='flash.display:DisplayObjectContainer' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Initialize context view. 
		 
		 ]]></description>
<param><![CDATA[view View being set as context view.
		 ]]></param>
</method>
<method name='handleStarlingCollection' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:handleStarlingCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='collection' param_types='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Initialize all Starling view instances in collection.
		 
		 ]]></description>
<param><![CDATA[collection Collection of Starling view instances used in context.
		 ]]></param>
</method>
<method name='handleStarlingContextView' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:handleStarlingContextView' isStatic='false' isFinal='false' isOverride='false'  param_names='currentStarling' param_types='starling.core:Starling' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Initialize Starling context view.
		 
		 ]]></description>
<param><![CDATA[currentStarling Starling view that needs to be initialized.
		 
		 ]]></param>
</method>
<method name='initializeContext' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:initializeContext' isStatic='false' isFinal='false' isOverride='false'  result_type='void'>
<description><![CDATA[
		 Initialize context if default context view is ready and if
		 all Starling view instances have their context prepared.
		 ]]></description>
</method>
<method name='onAddedToStage' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:onAddedToStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Context view is ready so try to initialize context.
		 
		 ]]></description>
<param><![CDATA[event View has been added to stage.
		 ]]></param>
</method>
<method name='onContextCreated' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:onContextCreated' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='starling.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Context view is ready so try to initialize context.
		 
		 ]]></description>
<param><![CDATA[event Context created for Starling view.
		 
		 ]]></param>
</method>
<method name='onRemovedFromStage' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:onRemovedFromStage' isStatic='false' isFinal='false' isOverride='false'  param_names='event' param_types='flash.events:Event' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Context view doesn't have reference to stage, so destroy the context.
		 
		 ]]></description>
<param><![CDATA[event View has been removed from stage.
		 ]]></param>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the string representation of the specified object.
		 ]]></description>
</method>
<field name='_contextReady' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_contextReady' type='Boolean' isStatic='false' isConst='false' >
<description><![CDATA[ Boolean indicating if context view is on stage. ]]></description>
</field>
<field name='_contextView' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_contextView' type='flash.display:DisplayObjectContainer' isStatic='false' isConst='false' >
<description><![CDATA[ Reference to regular view in Flash display list. ]]></description>
</field>
<field name='_context' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
<description><![CDATA[ Context being initialized. ]]></description>
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
<description><![CDATA[ Logger used to log messaged when using this extension. ]]></description>
</field>
<field name='_numStarlingsInQueue' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_numStarlingsInQueue' type='int' isStatic='false' isConst='false' defaultValue='0' >
<description><![CDATA[ Number of Starling instances which are not initialized. ]]></description>
</field>
<field name='_starlingCollection' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_starlingCollection' type='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection' isStatic='false' isConst='false' >
<description><![CDATA[ Collection of Starling view instances. ]]></description>
</field>
<field name='_uid' fullname='robotlegs.bender.extensions.sarsStageSync:SARSStageSyncExtension/private:_uid' type='String' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Extension UID. ]]></description>
</field>
<classRec name='SARSIntegrationExtension' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension' sourcefile='/Users/vjeko/Documents/Work/Projects/Vj3k0/robotlegs-extensions-SARS/src/robotlegs/bender/extensions/sarsIntegration/SARSIntegrationExtension.as' namespace='robotlegs.bender.extensions.sarsIntegration' access='public' baseclass='Object' interfaces='robotlegs.bender.framework.api:IExtension' isFinal='false' isDynamic='false' >
<description><![CDATA[
	 <p>This Extension will map all Starling view instances and View3D instance in
	 injector as well as create view maps for automatic mediation when instances are
	 added on stage/scene.</p>
	 ]]></description>
</classRec>
<method name='extend' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/extend' isStatic='false' isFinal='false' isOverride='false'  param_names='context' param_types='robotlegs.bender.framework.api:IContext' param_defaults='undefined' result_type='void'>
<description><![CDATA[ ]]></description>
<inheritDoc><![CDATA[]]></inheritDoc>
</method>
<method name='handleStarlingCollection' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/private:handleStarlingCollection' isStatic='false' isFinal='false' isOverride='false'  param_names='s' param_types='robotlegs.bender.extensions.sarsIntegration.api:StarlingCollection' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Map all Starling view instances to injector with their defined name and map
		 and initialize Starling view map which will mediate display instances.
		 
		 ]]></description>
<param><![CDATA[collection Collection of Starling view instances used in context.
		 ]]></param>
</method>
<method name='handleView3D' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/private:handleView3D' isStatic='false' isFinal='false' isOverride='false'  param_names='view3D' param_types='away3d.containers:View3D' param_defaults='undefined' result_type='void'>
<description><![CDATA[
		 Map View3D instance to injector and map and initialize Away3D view map
		 which will mediate display instances.
		 
		 ]]></description>
<param><![CDATA[view3D View3D instance which will be used in context.
		 ]]></param>
</method>
<method name='toString' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/toString' isStatic='false' isFinal='false' isOverride='false'  result_type='String'>
<description><![CDATA[
		 Returns the string representation of the specified object.
		 ]]></description>
</method>
<field name='_context' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/private:_context' type='robotlegs.bender.framework.api:IContext' isStatic='false' isConst='false' >
<description><![CDATA[ Context being initialized. ]]></description>
</field>
<field name='_logger' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/private:_logger' type='robotlegs.bender.framework.api:ILogger' isStatic='false' isConst='false' >
<description><![CDATA[ Logger used to log messaged when using this extension. ]]></description>
</field>
<field name='_uid' fullname='robotlegs.bender.extensions.sarsIntegration:SARSIntegrationExtension/private:_uid' type='String' isStatic='false' isConst='true' defaultValue='unknown' >
<description><![CDATA[ Extension UID. ]]></description>
</field>
</asdoc>
